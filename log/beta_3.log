Namespace(alpha_init=0.0, batch_norm=False, batch_size=512, cuda=True, data_dir='./data/SWaT_Dataset_Attack_v0.csv', graph='None', h_tol=0.0001, hidden_size=32, lambda1=0.0, log_interval=5, lr=0.002, max_iter=20, model='None', n_blocks=1, n_components=1, n_epochs=1, n_hidden=1, name='GANF_Water', output_dir='./checkpoint/model', rho_init=1.0, rho_max=1e+16, seed=18, weight_decay=0.0005)
Loading dataset
Params:
            n_blocks 1, 
            input_size 1, 
            hidden_size 32, 
            n_hidden 1, 
            cond_label_size=32, 
            batch_norm=False
            
GANF(
  (rnn): LSTM(1, 32, batch_first=True)
  (gcn): GNN(
    (lin_n): Linear(in_features=32, out_features=32, bias=True)
    (lin_r): Linear(in_features=32, out_features=32, bias=False)
    (lin_2): Linear(in_features=32, out_features=32, bias=True)
  )
  (nf): MAF(
    (net): FlowSequential(
      (0): MADE(
        (net_input): MaskedLinear(in_features=1, out_features=32, bias=True, cond_features=32)
        (net): Sequential(
          (0): Tanh()
          (1): MaskedLinear(in_features=32, out_features=32, bias=True)
          (2): Tanh()
          (3): MaskedLinear(in_features=32, out_features=2, bias=True)
        )
      )
    )
  )
)
-0.8766238 -2.880813 1.6235194 -2.8875487
Epoch: 1, train -log_prob: -1.34, test -log_prob: -2.78, roc_val: 0.7643, roc_test: 0.8960 ,h: 0.06949234008789062
[Best Threshold: {-2.2000} f1 = {0.3924}, pre = {0.9012}, rec = {0.2508}]
rho: 1.0, alpha 0.0, h 0.06949234008789062
===========================================
0.21291003 -3.060791 2.4980261 -3.0646665
Epoch: 2, train -log_prob: -1.09, test -log_prob: -2.91, roc_val: 0.7116, roc_test: 0.8846 ,h: 0.0350189208984375
[Best Threshold: {-2.5000} f1 = {0.3499}, pre = {0.5077}, rec = {0.2670}]
rho: 1.0, alpha 0.06949234008789062, h 0.0350189208984375
===========================================
-0.47057348 -3.2887514 1.7837421 -3.2950895
Epoch: 3, train -log_prob: -1.22, test -log_prob: -3.18, roc_val: 0.7296, roc_test: 0.8859 ,h: 0.01839447021484375
[Best Threshold: {-2.8000} f1 = {0.3439}, pre = {0.5714}, rec = {0.2460}]
rho: 10.0, alpha 0.06949234008789062, h 0.01839447021484375
===========================================
-2.2501326 -2.822556 -1.6066638 -2.8575668
Epoch: 4, train -log_prob: -0.49, test -log_prob: -2.77, roc_val: 0.6893, roc_test: 0.8706 ,h: 0.0086669921875
[Best Threshold: {-2.6000} f1 = {0.2668}, pre = {0.6213}, rec = {0.1699}]
rho: 10.0, alpha 0.2534370422363281, h 0.0086669921875
===========================================
-0.7546118 -3.2909467 1.5195214 -3.2973256
Epoch: 5, train -log_prob: -2.05, test -log_prob: -3.19, roc_val: 0.7045, roc_test: 0.8800 ,h: 0.008457183837890625
[Best Threshold: {-2.9000} f1 = {0.3330}, pre = {0.4831}, rec = {0.2540}]
rho: 10.0, alpha 0.3401069641113281, h 0.008457183837890625
===========================================
-2.102324 -3.1434274 -1.2223343 -3.1493611
Epoch: 6, train -log_prob: -0.79, test -log_prob: -3.10, roc_val: 0.7855, roc_test: 0.8985 ,h: 0.0032501220703125
[Best Threshold: {-3.0000} f1 = {0.3430}, pre = {0.4238}, rec = {0.2880}]
rho: 100.0, alpha 0.3401069641113281, h 0.0032501220703125
===========================================
-2.2941077 -3.1753862 -1.2278817 -3.1840432
Epoch: 7, train -log_prob: -1.79, test -log_prob: -3.14, roc_val: 0.8014, roc_test: 0.8985 ,h: 0.00118255615234375
[Best Threshold: {-3.0000} f1 = {0.3497}, pre = {0.5125}, rec = {0.2654}]
rho: 100.0, alpha 0.6651191711425781, h 0.00118255615234375
===========================================
-2.5359247 -3.432166 -1.7007306 -3.4368625
Epoch: 8, train -log_prob: -2.08, test -log_prob: -3.33, roc_val: 0.6646, roc_test: 0.8637 ,h: 0.0004119873046875
[Best Threshold: {-3.1000} f1 = {0.2918}, pre = {0.4207}, rec = {0.2233}]
rho: 100.0, alpha 0.7833747863769531, h 0.0004119873046875
===========================================
-2.5654933 -3.540635 -1.8091054 -3.540635
Epoch: 9, train -log_prob: -0.69, test -log_prob: -3.47, roc_val: 0.6760, roc_test: 0.8705 ,h: 0.00079345703125
[Best Threshold: {-3.3000} f1 = {0.3272}, pre = {0.4072}, rec = {0.2735}]
rho: 100.0, alpha 0.8245735168457031, h 0.00079345703125
===========================================
-2.6525304 -3.5451055 -1.7627418 -3.5451055
Epoch: 10, train -log_prob: -0.45, test -log_prob: -3.45, roc_val: 0.6582, roc_test: 0.8655 ,h: 0.002079010009765625
[Best Threshold: {-3.2000} f1 = {0.3135}, pre = {0.7168}, rec = {0.2006}]
rho: 1000.0, alpha 0.8245735168457031, h 0.002079010009765625
===========================================
-1.5591233 -4.090025 0.6695566 -4.104438
Epoch: 11, train -log_prob: -0.73, test -log_prob: -3.99, roc_val: 0.7504, roc_test: 0.8871 ,h: 0.0011138916015625
[Best Threshold: {-3.6000} f1 = {0.3528}, pre = {0.4818}, rec = {0.2783}]
rho: 10000.0, alpha 0.8245735168457031, h 0.0011138916015625
===========================================
-2.0969636 -3.0921597 0.2954779 -3.0921597
Epoch: 12, train -log_prob: 7.22, test -log_prob: -3.04, roc_val: 0.7385, roc_test: 0.8938 ,h: 0.000293731689453125
[Best Threshold: {-2.9000} f1 = {0.3525}, pre = {0.4804}, rec = {0.2783}]
rho: 100000.0, alpha 0.8245735168457031, h 0.000293731689453125
===========================================
-1.3448443 -3.4264069 0.6109113 -3.4264069
Epoch: 13, train -log_prob: -1.94, test -log_prob: -3.33, roc_val: 0.6915, roc_test: 0.8849 ,h: 1.52587890625e-05
[Best Threshold: {-3.0000} f1 = {0.3454}, pre = {0.5062}, rec = {0.2621}]
rho: 1000000.0, alpha 0.8245735168457031, h 1.52587890625e-05
===========================================
Epoch: 14, train -log_prob: -0.69, test -log_prob: -2.93, roc_val: 0.6776, roc_test: 0.8818 ,h: 0.0
[Best Threshold: {-2.7000} f1 = {0.3205}, pre = {0.4983}, rec = {0.2362}]
save model 14 epoch
Epoch: 15, train -log_prob: -3.07, test -log_prob: -2.73, roc_val: 0.6546, roc_test: 0.8768 ,h: 0.0
[Best Threshold: {-2.6000} f1 = {0.3446}, pre = {0.4482}, rec = {0.2799}]
Epoch: 16, train -log_prob: -3.11, test -log_prob: -3.33, roc_val: 0.7017, roc_test: 0.8590 ,h: 0.0
[Best Threshold: {-3.2000} f1 = {0.3341}, pre = {0.5522}, rec = {0.2395}]
save model 16 epoch
Epoch: 17, train -log_prob: -3.62, test -log_prob: -3.67, roc_val: 0.6711, roc_test: 0.8747 ,h: 0.0
[Best Threshold: {-3.5000} f1 = {0.3347}, pre = {0.4680}, rec = {0.2605}]
save model 17 epoch
Epoch: 18, train -log_prob: -3.71, test -log_prob: -3.79, roc_val: 0.6757, roc_test: 0.8782 ,h: 3.814697265625e-06
[Best Threshold: {-3.6000} f1 = {0.3400}, pre = {0.5426}, rec = {0.2476}]
save model 18 epoch
Epoch: 19, train -log_prob: -3.73, test -log_prob: -3.69, roc_val: 0.6838, roc_test: 0.8791 ,h: 7.62939453125e-06
[Best Threshold: {-3.5000} f1 = {0.3347}, pre = {0.4530}, rec = {0.2654}]
Epoch: 20, train -log_prob: -3.74, test -log_prob: -3.85, roc_val: 0.6908, roc_test: 0.8727 ,h: 1.1444091796875e-05
[Best Threshold: {-3.7000} f1 = {0.3456}, pre = {0.4320}, rec = {0.2880}]
save model 20 epoch
Epoch: 21, train -log_prob: -3.76, test -log_prob: -3.72, roc_val: 0.6760, roc_test: 0.8799 ,h: 7.62939453125e-06
[Best Threshold: {-3.6000} f1 = {0.3571}, pre = {0.4834}, rec = {0.2832}]
Epoch: 22, train -log_prob: -3.77, test -log_prob: -3.83, roc_val: 0.6779, roc_test: 0.8760 ,h: 1.1444091796875e-05
[Best Threshold: {-3.7000} f1 = {0.3283}, pre = {0.3968}, rec = {0.2799}]
Epoch: 23, train -log_prob: -3.78, test -log_prob: -3.73, roc_val: 0.6806, roc_test: 0.8730 ,h: 1.1444091796875e-05
[Best Threshold: {-3.6000} f1 = {0.3390}, pre = {0.4087}, rec = {0.2896}]
Epoch: 24, train -log_prob: -3.79, test -log_prob: -3.85, roc_val: 0.6925, roc_test: 0.8799 ,h: 1.1444091796875e-05
[Best Threshold: {-3.7000} f1 = {0.3454}, pre = {0.4550}, rec = {0.2783}]
save model 24 epoch
Epoch: 25, train -log_prob: -3.80, test -log_prob: -3.74, roc_val: 0.6739, roc_test: 0.8780 ,h: 1.1444091796875e-05
[Best Threshold: {-3.6000} f1 = {0.3585}, pre = {0.5522}, rec = {0.2654}]
Epoch: 26, train -log_prob: -3.80, test -log_prob: -3.86, roc_val: 0.6953, roc_test: 0.8816 ,h: 1.1444091796875e-05
[Best Threshold: {-3.7000} f1 = {0.3392}, pre = {0.6118}, rec = {0.2346}]
save model 26 epoch
train_water.py:147: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  A = torch.tensor(init, requires_grad=True, device=device)
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/root/anaconda3/envs/GANF/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
